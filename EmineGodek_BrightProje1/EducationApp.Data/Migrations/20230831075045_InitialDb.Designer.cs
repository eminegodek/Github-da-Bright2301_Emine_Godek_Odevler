// <auto-generated />
using System;
using EducationApp.Data.Concrete.EFCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    [Migration("20230831075045_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(4366),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(4381),
                            UserId = "ae64f068-85a5-4c70-ad59-90b7b5646781"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9375),
                            Description = "Türk Mutfağının bir birinden eşsiz lezzetleriyle sofralarınıza lezzet katacaksınız.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9383),
                            Name = "Türk Mutfağı",
                            Url = "turk-mutfagi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9387),
                            Description = "Uzak Doğunun bir birinden eşsiz lezzetleriyle sofralarınıza lezzet katacaksınız.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9387),
                            Name = "Uzak Doğu",
                            Url = "uzak-dogu"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9388),
                            Description = "Kalabalık gruplarla eğitimlere katılarak eşsiz anılar oluşturacaksınız.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9389),
                            Name = "Kalabalık Sofra",
                            Url = "kalabalik-sofra"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9390),
                            Description = "En renkli tatlılar kutlama yemeklerinizin favorisi olacak.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9390),
                            Name = "Pastacılık",
                            Url = "pastacilik"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9391),
                            Description = "İyi pişmiş bir et menüsünden daha iyi çok az şey vardır.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9392),
                            Name = "Etler",
                            Url = "etler"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9393),
                            Description = "El açması hamur işleri için komşunuz yardımınızı isteyecek.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9393),
                            Name = "Hamur İşleri",
                            Url = "hamur-isleri"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9394),
                            Description = "Evinizde kendi kafenizi kurun.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 287, DateTimeKind.Local).AddTicks(9394),
                            Name = "Kahveler",
                            Url = "kahveler"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("BirthOfYear")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId1");

                    b.ToTable("Instructors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1990,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2127),
                            FirstName = "Dominic",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Harmon",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2134),
                            PhotoUrl = "1.png",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1990,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2141),
                            FirstName = "Justina",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Burch",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2141),
                            PhotoUrl = "1.png",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1985,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2143),
                            FirstName = "Madison",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Beard",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2143),
                            PhotoUrl = "1.png",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2145),
                            FirstName = "Sara",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Wade",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2146),
                            PhotoUrl = "1.png",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1988,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2147),
                            FirstName = "Jacob",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Hunt",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2148),
                            PhotoUrl = "1.png",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1989,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2149),
                            FirstName = "Osamu",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Dazai",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2149),
                            PhotoUrl = "1.png",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1983,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2151),
                            FirstName = "Zachery",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Salas",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2152),
                            PhotoUrl = "1.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2153),
                            FirstName = "Matt",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Haig",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2153),
                            PhotoUrl = "1.png",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1982,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2155),
                            FirstName = "William",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Hawkingan",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2155),
                            PhotoUrl = "1.png",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1990,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2156),
                            FirstName = "Geraldine",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Richmond",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2157),
                            PhotoUrl = "1.png",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1983,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2158),
                            FirstName = "Steffan",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Ros",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2158),
                            PhotoUrl = "1.png",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1991,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2160),
                            FirstName = "Nichole",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Talley",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2160),
                            PhotoUrl = "1.png",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1979,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2161),
                            FirstName = "Yetta",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Sheppard",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2162),
                            PhotoUrl = "1.png",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1978,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2163),
                            FirstName = "Elijah",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Farley",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2163),
                            PhotoUrl = "1.png",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            About = "Yazılım eğitimi, modern teknolojinin temelini oluşturan önemli bir süreçtir. Katılımcılara yazılım geliştirme süreçlerinde bilgi ve beceriler kazandırır.",
                            BirthOfYear = 1991,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2165),
                            FirstName = "Neil",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Wooten",
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 288, DateTimeKind.Local).AddTicks(2165),
                            PhotoUrl = "1.png",
                            ProductId = 15
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHome")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(501),
                            Description = "Türk Mutfağının bir birinden eşsiz lezzetleriyle sofralarınıza lezzet katacaksınız.",
                            ImageUrl = "14.jpg",
                            InstructorId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(505),
                            Name = "Türk Mutfağı",
                            Price = 100m,
                            Time = 200,
                            Url = "turk-mutfagi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(511),
                            Description = "Uzak Doğunun bir birinden eşsiz lezzetleriyle sofralarınıza lezzet katacaksınız.",
                            ImageUrl = "12.jpg",
                            InstructorId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(511),
                            Name = "Uzak Doğu",
                            Price = 100m,
                            Time = 200,
                            Url = "java"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(541),
                            Description = "Kalabalık gruplarla eğitimlere katılarak eşsiz anılar oluşturacaksınız",
                            ImageUrl = "3.jpg",
                            InstructorId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(541),
                            Name = "Kalabalık Sofra",
                            Price = 100m,
                            Time = 200,
                            Url = "kalabalik-sofra"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(543),
                            Description = "En renkli tatlılar kutlama yemeklerinizin favorisi olacak.",
                            ImageUrl = "6.jpg",
                            InstructorId = 4,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(543),
                            Name = "Pastacılık",
                            Price = 100m,
                            Time = 200,
                            Url = "pastacilik"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(545),
                            Description = "İyi pişmiş bir et menüsünden daha iyi çok az şey vardır.",
                            ImageUrl = "10.jpg",
                            InstructorId = 5,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(546),
                            Name = "Etler",
                            Price = 100m,
                            Time = 200,
                            Url = "etler"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(547),
                            Description = "El açması hamur işleri için komşunuz yardımınızı isteyecek.",
                            ImageUrl = "7.jpg",
                            InstructorId = 6,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(548),
                            Name = "Hamur İşleri",
                            Price = 100m,
                            Time = 200,
                            Url = "hamur-isleri"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(549),
                            Description = "Evinizde kendi kafenizi kurun.",
                            ImageUrl = "9.jpg",
                            InstructorId = 7,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(550),
                            Name = "Kahveler",
                            Price = 100m,
                            Time = 200,
                            Url = "kahveler"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(551),
                            Description = "Türk Mutfağının bir birinden eşsiz lezzetleriyle sofralarınıza lezzet katacaksınız.",
                            ImageUrl = "1.jpg",
                            InstructorId = 8,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(552),
                            Name = "Türk Mutfağı",
                            Price = 100m,
                            Time = 200,
                            Url = "turk-mutfagi"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(554),
                            Description = "El açması hamur işleri için komşunuz yardımınızı isteyecek.",
                            ImageUrl = "2.jpg",
                            InstructorId = 9,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(554),
                            Name = "Hamur İşleri",
                            Price = 100m,
                            Time = 200,
                            Url = "hamur-isleri"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(556),
                            Description = "En renkli tatlılar kutlama yemeklerinizin favorisi olacak.",
                            ImageUrl = "8.jpg",
                            InstructorId = 10,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(556),
                            Name = "Pastacılık",
                            Price = 100m,
                            Time = 200,
                            Url = "pastacilik"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(559),
                            Description = "El açması hamur işleri için komşunuz yardımınızı isteyecek.",
                            ImageUrl = "11.jpg",
                            InstructorId = 11,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(559),
                            Name = "Hamur İşleri",
                            Price = 100m,
                            Time = 200,
                            Url = "hamur-isleri"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(561),
                            Description = "En renkli tatlılar kutlama yemeklerinizin favorisi olacak.",
                            ImageUrl = "13.png",
                            InstructorId = 12,
                            IsActive = true,
                            IsDeleted = false,
                            IsHome = true,
                            ModifiedDate = new DateTime(2023, 8, 31, 10, 50, 45, 290, DateTimeKind.Local).AddTicks(561),
                            Name = "Pastacılık",
                            Price = 100m,
                            Time = 200,
                            Url = "pastacilik"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "38464a90-b884-422c-a94f-2770354d0d49",
                            Description = "Yöneticilerin rolü bu.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "099df881-2a3e-4fe7-948b-54dd633fb2a8",
                            Description = "Diğer tüm kullanıcıların rolü bu.",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ae64f068-85a5-4c70-ad59-90b7b5646781",
                            AccessFailedCount = 0,
                            Address = "Beykoz",
                            City = "İstanbul",
                            ConcurrencyStamp = "cf783194-a1b6-4940-99f8-ede6c56262bd",
                            DateOfBirth = new DateTime(1998, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eminegodekk@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Emine",
                            Gender = "KADIN",
                            LastName = "GÖDEK",
                            LockoutEnabled = true,
                            Name = " ",
                            NormalizedEmail = "EMINEGODEKK@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEB4KMdXskmBeX8h2zzmrT84ydcHhB2ZXipDRxg8xovFrnrvz/jXWQiH4OnpyPKen+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ae64f068-85a5-4c70-ad59-90b7b5646781",
                            RoleId = "38464a90-b884-422c-a94f-2770354d0d49"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Cart", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.CartItem", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Instructor", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId1");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Order", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Product", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Instructor", "Instructor")
                        .WithMany("Products")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Instructor", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
